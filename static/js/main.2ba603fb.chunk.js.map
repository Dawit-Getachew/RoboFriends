{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","id","email","className","src","alt","CardList","robots","cardComponents","map","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","ListeningStateChangedEvent","console","log","Component","App","onSearchChange","event","setState","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robo","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCFSC,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,MAGrB,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAG,+BAA0BH,EAA1B,iBAA6CI,IAAI,WACzD,6BACI,4BAAKL,GACL,2BAAIE,MCGLI,EAVE,SAAC,GAAe,IAAdC,EAAa,EAAbA,OACTC,EAAiBD,EAAOE,KAAI,SAACT,EAAMU,GACrC,OAAO,kBAAC,EAAD,CAAMT,GAAIM,EAAOG,GAAGT,GAAGU,IAAKD,EAAGV,KAAMO,EAAOG,GAAGV,KAAME,MAAOK,EAAOG,GAAGR,WAEjF,OACI,6BACIM,ICUGI,EAfG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACS,2BACAV,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCAZI,G,MARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAoBC,OAAQ,UACnEJ,EAAMK,YCaEC,E,kDAfX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,8DAMLC,EAAOC,GACrBC,KAAKC,2BAA2B,CAAEJ,UAAU,IAC5CK,QAAQC,IAAIJ,K,+BAGZ,OAAOC,KAAKJ,MAAMC,SAAW,yDAAqCG,KAAKX,MAAMK,a,GAZrDU,aC2CbC,E,kDArCX,aAAe,IAAD,8BACV,gBAYJC,eAAgB,SAACC,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAZzC,EAAKf,MAAQ,CACTlB,OAAQ,GACR+B,YAAa,IAJP,E,gEAOO,IAAD,OAChBG,MAAM,4BACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAC9B,OAAQsC,S,+BAMhC,IAAD,EACyBhB,KAAKJ,MAA5BlB,EADF,EACEA,OAAQ+B,EADV,EACUA,YACTQ,EAAiBvC,EAAOwC,QAAO,SAAAC,GACjC,OAAOA,EAAKhD,KAAKiD,cAAcC,SAASZ,EAAYW,kBAG3D,OAAQ1C,EAAO4C,OAEJ,yBAAKhD,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAgBgB,KAAKM,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU5B,OAAQuC,OAN9B,wBAAI3C,UAAU,MAAd,e,GAxBU8B,aCDlBmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACA,kBAAC,EAAD,QAGFC,SAASC,eAAe,SPsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLI,QAAQJ,MAAMA,EAAMoC,a","file":"static/js/main.2ba603fb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nconst Card = ({name, id, email}) => {\n    // const {name, id, email} = props; this is used to destructuring and we can also use\n    // use in card const card = (props) by saying and ketach degmo props.name, props,id eyalin.\n    return(\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"Robots\"/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots} ) => {\n    const cardComponents = robots.map((name, i) => {\n        return <Card id={robots[i].id}key={i} name={robots[i].name} email={robots[i].email}/>\n    })\n    return(\n        <div>\n           {cardComponents}\n        </div>\n    )\n}\nexport default CardList;","import React from 'react';\n\n\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div>\n                 <input \n                 className='pa3 ba b--green bg-lightest-blue'\n                 type='search' \n                 placeholder='search robots' \n                 onChange={searchChange}\n                 />\n        </div>\n    )\n}\n\n\n\nexport default SearchBox;","\nimport React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '2px solid black' , height: '500px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\ncomponentDidCatch(error, info) {\n    this.ListeningStateChangedEvent({ hasError: true })\n    console.log(info)\n}\nrender() {\n    return this.state.hasError ? <h1>Oooops. That is not good.</h1> : this.props.children\n}\n\n}\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\n\nclass App extends Component {\n    constructor() { \n        super()\n        this.state = {\n            robots: [],\n            searchfield: '',\n        }\n    }\n    componentDidMount() {\n        fetch('https://jsonfy.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots: users}))\n    }\n\n    onSearchChange= (event) =>{\n        this.setState({searchfield: event.target.value})\n    }\n    render() {\n        const {robots, searchfield} = this.state;\n        const filteredRobots = robots.filter(robo => {\n            return robo.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n     //if bilen (robots.lengh === 0) yalinew if (!robots.length) ga ekul nw !robots.length milew kezero ga ekul kehone negate adirigeh wode true keyiew endemalet nw\n     return !robots.length ?    // if statement yeneberewun wode ternary keyirenew nw \n        <h1 className='tc'>loading</h1> :\n                <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange = {this.onSearchChange} />\n                <Scroll>\n                    <ErrorBoundary>\n                    <CardList robots={filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n                </div>\n    }\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n    <App />\n   </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}